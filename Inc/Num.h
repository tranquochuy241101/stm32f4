// Generated by gencpp from file pid_plot/Num.msg
// DO NOT EDIT!


#ifndef PID_PLOT_MESSAGE_NUM_H
#define PID_PLOT_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pid_plot
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : output_rpm(0)
    , output_controller(0)
    , input_setpoint(0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : output_rpm(0)
    , output_controller(0)
    , input_setpoint(0)  {
  (void)_alloc;
    }



   typedef uint16_t _output_rpm_type;
  _output_rpm_type output_rpm;

   typedef uint16_t _output_controller_type;
  _output_controller_type output_controller;

   typedef uint16_t _input_setpoint_type;
  _input_setpoint_type input_setpoint;





  typedef boost::shared_ptr< ::pid_plot::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pid_plot::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::pid_plot::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::pid_plot::Num > NumPtr;
typedef boost::shared_ptr< ::pid_plot::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pid_plot::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pid_plot::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pid_plot::Num_<ContainerAllocator1> & lhs, const ::pid_plot::Num_<ContainerAllocator2> & rhs)
{
  return lhs.output_rpm == rhs.output_rpm &&
    lhs.output_controller == rhs.output_controller &&
    lhs.input_setpoint == rhs.input_setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pid_plot::Num_<ContainerAllocator1> & lhs, const ::pid_plot::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pid_plot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pid_plot::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pid_plot::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pid_plot::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pid_plot::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pid_plot::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pid_plot::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pid_plot::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5652f9c0d51f72a895489fcab75162b1";
  }

  static const char* value(const ::pid_plot::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5652f9c0d51f72a8ULL;
  static const uint64_t static_value2 = 0x95489fcab75162b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::pid_plot::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pid_plot/Num";
  }

  static const char* value(const ::pid_plot::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pid_plot::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 output_rpm\n"
"uint16 output_controller\n"
"uint16 input_setpoint\n"
;
  }

  static const char* value(const ::pid_plot::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pid_plot::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output_rpm);
      stream.next(m.output_controller);
      stream.next(m.input_setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pid_plot::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pid_plot::Num_<ContainerAllocator>& v)
  {
    s << indent << "output_rpm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.output_rpm);
    s << indent << "output_controller: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.output_controller);
    s << indent << "input_setpoint: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.input_setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PID_PLOT_MESSAGE_NUM_H
